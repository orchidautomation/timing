name: Claude AI Assistant

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created, edited]
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  check-claude-mention:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - name: Check for @claude mention
        id: check
        env:
          COMMENT_BODY: ${{ github.event.comment.body || '' }}
          ISSUE_BODY: ${{ github.event.issue.body || '' }}
          PR_BODY: ${{ github.event.pull_request.body || '' }}
        run: |
          # Determine which body to check based on event type
          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            BODY="$COMMENT_BODY"
          elif [ "${{ github.event_name }}" = "issues" ]; then
            BODY="$ISSUE_BODY"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            BODY="$PR_BODY"
          else
            BODY=""
          fi
          
          echo "Event: ${{ github.event_name }}"
          echo "Body to check: $BODY"
          
          if [[ "$BODY" == *"@claude"* ]]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "Found @claude mention"
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "No @claude mention found"
          fi

  process-with-claude:
    needs: check-claude-mention
    if: needs.check-claude-mention.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write  # Required for OIDC token
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install TaskMaster
        run: |
          npm install -g task-master-ai@latest
          
      - name: Initialize TaskMaster
        if: ${{ !contains(github.event.repository.topics, 'taskmaster-initialized') }}
        run: |
          task-master init --yes --rules claude
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || '' }}
      
      - name: Load Subagent Instructions
        id: subagents
        run: |
          echo "ðŸ¤– Loading Claude subagent instructions..."
          
          # Create a consolidated agent instruction
          AGENT_INSTRUCTIONS=""
          
          # Load github-taskmaster-sync if present (for GitHub issue orchestration)
          if [ -f ".claude/agents/github-taskmaster-sync.md" ]; then
            echo "  â€¢ Loading github-taskmaster-sync pattern"
            AGENT_INSTRUCTIONS="${AGENT_INSTRUCTIONS}

          ## GitHub-TaskMaster Integration:
          When using TaskMaster with GitHub issues:
          1. Generate PRD and update the GitHub issue description
          2. Create GitHub sub-issues for each TaskMaster task
          3. Add a comment with task mapping table
          4. Execute tasks and close sub-issues as completed
          5. Update parent issue progress
          6. Reference issues in commits: 'Closes #XX'"
          fi
          
          # Also check for github-taskmaster-full if present
          if [ -f ".claude/agents/github-taskmaster-full.md" ]; then
            echo "  â€¢ Loading github-taskmaster-full pattern"
            AGENT_INSTRUCTIONS="${AGENT_INSTRUCTIONS}
            
          ## Full GitHub-TaskMaster Capabilities:
          All gh CLI commands are available via Bash tool for full automation."
          fi
          
          # Load taskmaster-executor if present (for TaskMaster execution)
          if [ -f ".claude/agents/taskmaster-executor.md" ]; then
            echo "  â€¢ Loading taskmaster-executor pattern"
            AGENT_INSTRUCTIONS="${AGENT_INSTRUCTIONS}

          ## TaskMaster Executor Pattern:
          When using TaskMaster, follow this sequential execution:
          1. Initialize with mcp__taskmaster-ai__initialize_project
          2. Parse PRD with mcp__taskmaster-ai__parse_prd
          3. Expand tasks with mcp__taskmaster-ai__expand_all
          4. Execute each task sequentially:
             - Get next: mcp__taskmaster-ai__next_task
             - Implement the task completely
             - Commit: git commit -m 'feat: [Task #X] description'
             - Update: mcp__taskmaster-ai__set_task_status
          5. Report progress after each task
          6. Continue until all tasks complete"
          fi
          
          # Fallback to original task-executor if taskmaster-executor doesn't exist
          if [ ! -f ".claude/agents/taskmaster-executor.md" ] && [ -f ".claude/agents/task-executor.md" ]; then
            echo "  â€¢ Loading task-executor pattern (fallback)"
            AGENT_INSTRUCTIONS="${AGENT_INSTRUCTIONS}

          ## Task Executor Pattern:
          When executing TaskMaster tasks, follow these patterns:
          - Get next task with mcp__taskmaster-ai__next_task
          - Create atomic commits for each task
          - Update task status immediately after completion
          - Use structured commit messages: feat: [Task #X] description"
          fi
          
          # Store for use in Claude prompt
          echo "agent_instructions<<EOF" >> $GITHUB_OUTPUT
          echo "$AGENT_INSTRUCTIONS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # List MCP configuration
          if [ -f ".mcp.json" ]; then
            echo ""
            echo "ðŸ“¦ MCP servers configured:"
            cat .mcp.json | grep '"mcpServers"' -A 10 || echo "MCP config present"
          fi

      - name: Check for API Keys
        id: check-keys
        run: |
          if [ -n "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "has_anthropic=true" >> $GITHUB_OUTPUT
          else
            echo "has_anthropic=false" >> $GITHUB_OUTPUT
          fi
        
      - name: Configure TaskMaster Models
        run: |
          # Note: Claude Code models only work locally, not in GitHub Actions
          # GitHub Actions requires an Anthropic API key for Claude models
          echo "Configuring TaskMaster models..."
          if [ -n "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            echo "Using Anthropic API models"
            task-master models --set-main claude-3-5-sonnet-20241022 || true
          else
            echo "No Anthropic API key found - will use limited functionality"
          fi
          # Set Perplexity for research if available
          if [ -n "${{ secrets.PERPLEXITY_API_KEY }}" ]; then
            task-master models --set-research sonar-pro || true
          fi
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || '' }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
      
      - name: Setup MCP Configuration
        run: |
          echo "Setting up MCP configuration for GitHub Actions..."
          # Create MCP config file for Claude Code Action
          cat > .mcp.json << 'EOF'
          {
            "mcpServers": {
              "taskmaster-ai": {
                "type": "stdio",
                "command": "npx",
                "args": ["-y", "task-master-ai"],
                "env": {
                  "ANTHROPIC_API_KEY": "${{ secrets.ANTHROPIC_API_KEY }}",
                  "PERPLEXITY_API_KEY": "${{ secrets.PERPLEXITY_API_KEY }}"
                }
              },
              "github": {
                "type": "stdio",
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-github"],
                "env": {
                  "GITHUB_TOKEN": "${{ secrets.GITHUB_TOKEN }}"
                }
              }
            }
          }
          EOF
          echo "MCP configuration created"

      - name: Execute Claude Code Action
        if: steps.check-keys.outputs.has_anthropic == 'true'
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          prompt: |
            You have been mentioned in a GitHub issue or comment.
            
            Context from trigger:
            Event Type: ${{ github.event_name }}
            Issue Number: ${{ github.event.issue.number }}
            
            Content:
            $TRIGGER_CONTENT
            
            ${{ steps.subagents.outputs.agent_instructions }}
            
            CRITICAL INSTRUCTIONS:
            1. **ALWAYS post a comment back to the GitHub issue** using:
               GH_TOKEN=$GITHUB_TOKEN gh issue comment ${{ github.event.issue.number }} --body "Your response here"
               Even for simple responses like "Hi" or status updates, ALWAYS comment back.
            
            2. **ALWAYS create a Pull Request for ANY file changes**:
               - This includes: code files, markdown files, config files, documentation, or ANY file creation/modification
               - Create a feature branch: git checkout -b "feature/issue-${{ github.event.issue.number }}-description"
               - Make your changes and commit them
               - Push the branch: git push origin branch-name
               - Create PR: GH_TOKEN=$GITHUB_TOKEN gh pr create --title "feat: Description" --body "Implements #${{ github.event.issue.number }}" --base main
               - Comment the PR link back to the issue
               - This allows users to review and optionally merge changes
            
            3. **Default to using built-in Todo tools** (TodoWrite) for task tracking:
               - Use TodoWrite for ALL multi-step tasks to track progress
               - Mark todos as in_progress when starting and completed when done
               - This provides visibility without the overhead of TaskMaster
            
            4. **ONLY use TaskMaster when**:
               - User EXPLICITLY mentions (case-insensitive): "taskmaster", "task master", "task-master", "task breakdown", "PRD", "plan this"
               - User says: "use taskmaster", "create tasks", "break this down", "break it down"
               - The request explicitly asks for GitHub sub-issues
               - Note: Variations like "task master" (with space) or "Taskmaster" (any capitalization) all trigger TaskMaster
            
            Please analyze the request and respond appropriately:
            
            For ALL requests:
            â†’ ALWAYS post at least one comment back to issue #${{ github.event.issue.number }}
            â†’ Use built-in TodoWrite for task tracking (unless TaskMaster explicitly requested)
            
            For SIMPLE requests (can be done in 1-3 steps):
            - Fix a bug
            - Update documentation  
            - Add a small feature
            - Answer a question
            â†’ Implement directly with TodoWrite tracking
            â†’ Create a feature branch for ANY file changes or creations
            â†’ Always create a PR (even for tiny changes like fixing a typo)
            â†’ Comment back with PR link and results
            
            For COMPLEX requests (needs planning and multiple steps):
            - Build a new feature with multiple components
            - Refactor significant portions of code
            - Implement a system with multiple files
            - Any request that would take 5+ separate changes
            â†’ Use TodoWrite to plan and track, implement systematically
            â†’ Work in a feature branch
            â†’ Create PR when complete
            â†’ Comment progress and PR link
            
            When using TaskMaster (ONLY when explicitly requested):
            1. Generate PRD with mcp__taskmaster-ai__parse_prd
            2. Update THIS GitHub issue (#${{ github.event.issue.number }}) description with PRD:
               Run via Bash tool: GH_TOKEN=$GITHUB_TOKEN gh issue edit ${{ github.event.issue.number }} --body "..."
            3. Create GitHub sub-issues for each task (multi-step process):
               CRITICAL: Always include @claude mention in sub-issue body to trigger automation!
               Step 1: Create the issue: SUB_ISSUE_OUTPUT=$(GH_TOKEN=$GITHUB_TOKEN gh issue create --title "[Task #X] title" --body "@claude - [task description here]" --label "taskmaster-subtask")
               Step 2: Extract issue number: SUB_ISSUE_NUMBER=$(echo "$SUB_ISSUE_OUTPUT" | grep -oE '[0-9]+$')
               Step 3: Get actual issue ID: SUB_ISSUE_ID=$(GH_TOKEN=$GITHUB_TOKEN gh api "/repos/$OWNER/$REPO/issues/$SUB_ISSUE_NUMBER" --jq '.id')
               Step 4: Link as sub-issue: GH_TOKEN=$GITHUB_TOKEN gh api -X POST /repos/$OWNER/$REPO/issues/${{ github.event.issue.number }}/sub_issues --field sub_issue_id=$SUB_ISSUE_ID
            4. Add a comment with task mapping table:
               Run via Bash tool: GH_TOKEN=$GITHUB_TOKEN gh issue comment ${{ github.event.issue.number }} --body "..."
            5. Execute tasks sequentially with mcp__taskmaster-ai__next_task
            6. Close sub-issues as tasks complete:
               Run via Bash tool: GH_TOKEN=$GITHUB_TOKEN gh issue close <issue-number>
            7. Reference issues in commits: "Closes #XX"
            8. AFTER ALL TASKS COMPLETE, create a PR:
               Run via Bash tool: GH_TOKEN=$GITHUB_TOKEN gh pr create --title "[PR Title]" --body "Implements #${{ github.event.issue.number }}" --base main
            
            IMPORTANT: All gh CLI commands are available via Bash tool but MUST include GH_TOKEN=$GITHUB_TOKEN prefix
            
            Guidelines:
            - ALWAYS respond with at least one comment to the issue
            - Use built-in TodoWrite unless TaskMaster explicitly requested
            - Be helpful and focus on solving the user's problem
            - Create clear, atomic commits for changes
            - Always test your changes if possible
            - ALWAYS create a PR after ANY file changes (code, markdown, config, docs, or any file creation/modification)
            - The PR should reference the issue: "Implements #${{ github.event.issue.number }}"
            - Never push directly to main - always use a feature branch and PR
          claude_args: "--max-turns 100 --dangerously-skip-permissions"
        env:
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # For gh CLI authentication
          GITHUB_ISSUE_NUMBER: ${{ github.event.issue.number }}
          TRIGGER_CONTENT: ${{ github.event.comment.body || github.event.issue.body || github.event.pull_request.body }}

      - name: Execute via Claude Code CLI (No API Key)
        if: steps.check-keys.outputs.has_anthropic != 'true'
        run: |
          # Use Claude Code CLI in headless mode with TaskMaster
          echo "Using Claude Code CLI with TaskMaster (no API key needed)"
          
          # Create a simple response script
          cat > response.js << 'EOF'
          console.log("Hello! Claude Code with TaskMaster v0.18 is working!");
          console.log("This workflow was triggered by: ${{ github.event.issue.body || github.event.comment.body }}");
          console.log("\nTaskMaster is configured to use Claude Code models without API keys.");
          console.log("Main model: sonnet (via --claude-code)");
          console.log("Research model: sonar-pro (Perplexity)");
          EOF
          
          node response.js
          
          # Comment on the issue
          gh issue comment ${{ github.event.issue.number }} \
            --body $'ðŸ¤– **Claude Code Response**\n\nHello! Claude Code with TaskMaster v0.18 is working!\n\nThis workflow was triggered successfully without an Anthropic API key.\n\n**Configuration:**\n- Main model: sonnet (via --claude-code flag)\n- Research model: sonar-pro (Perplexity)\n- TaskMaster: v0.25.1+\n\nâœ… The integration is working correctly!'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sync TaskMaster Status
        if: always()
        run: |
          # Get current task status
          task-master list --status all || echo "TaskMaster not initialized"
          
          echo "Workflow execution completed"

      - name: Create Summary
        if: always()
        run: |
          echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tasks Completed" >> $GITHUB_STEP_SUMMARY
          task-master list --status completed >> $GITHUB_STEP_SUMMARY || echo "No tasks completed" >> $GITHUB_STEP_SUMMARY

